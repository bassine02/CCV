#include<stdio.h>
#include<stdlib.h>


void traverse(int ,int ,int ,int,int (*y)[256]);
char Assign(int );
int search(int ,int *,int);

int main()
{
	int x,b,i,j,value,a=0;
	char MaxAssign='E';
	int val[100];
	int y[256][256];
	int clr1[100],clr2[100],clr3[100],clr4[100],clr5[100];
	int a1=0,a2=0,a3=0,a4=0,a5=0;
	FILE *pFile;
    pFile = fopen("exp.txt", "r");

	for(i=0;i<255;i++)
	{
	 for(j=0;j<255;j++)
	 {
		fscanf(pFile,"%d*[, ]\n", &y[i][j]);

	 }

	}
	fclose(pFile);
	printf("\n\n\n\n\n\n\n\n<------the test matrix is------>\n\n");
	for(i=0;i<255;i++)
	{
	 for(j=0;j<255;j++)
	 {

			printf("%d",y[i][j]);
	 }
	 printf("\n");
	}
	for(i=0;i<255;i++)
	{
	 for(j=0;j<255;j++)
	 {
		x=y[i][j];
		
			 if (search(x,val,a))
		 {

		 	y[i][j]=MaxAssign+1;
			MaxAssign=MaxAssign+1;
			value=y[i][j];
			traverse(i,j,x,value,y);
			if (x=1)
			{
				clr1[a1]=value;
				a1++;
			}
			if (x=2)
			{
				clr2[a2]=value;
				a2++;
			}
			if (x=3)
			{
				clr3[a3]=value;
				a3++;
			}
			if (x=4)
			{
				clr2[a4]=value;
				a4++;
			}
			if (x=5)
			{
				clr5[a5]=value;
				a5++;
			} 
		 }
		 	else
		 {
			val[a]=x;
			a=a+1;

			y[i][j]=Assign(x);
			value=y[i][j];
			traverse(i,j,x,value,y);

		 }
		

	 }
	}

	printf("\n\n\n\n\n\n\n\n<------the result matrix is------>\n\n");
	for(i=0;i<255;i++)
	{
	 for(j=0;j<255;j++)
	 {

			printf("%d",y[i][j]);
	 }
	 printf("\n");
	}

	pFile = fopen("exp1.txt", "w");

	for(i=0;i<255;i++)
	{
	 for(j=0;j<255;j++)
	 {
		fprintf(pFile,"%d  ", &y[i][j]);

	 }
	}
   printf("\n\n\n%d %d %d %d %d ",a1,a2,a3,a4,a5);

}

char Assign(int d)
{
	switch(d)
	{
		case 1:
			return 1;
			break;
		case 2:
			return 2;
			break;
		case 3:
			return 3;
			break;
		case 4:
			return 4;
			break;
		case 5:
			return 5;
			break;
		case 6:
			return 6;
			break;
		case 7:
			return 7;
			break;
		case 8:
			return 8;
			break;
		case 9:
			return 9;
			break;
		case 10:
			return 10;
			break;
		case 11:
			return 11;
			break;
		case 12:
			return 12;
			break;
		case 13:
			return 13;
			break;
		case 14:
			return 14;
			break;
		case 15:
			return 15;
			break;
		case 16:
			return 16;
			break;
		case 17:
			return 17;
			break;
		case 18:
			return 18;
			break;
		case 19:
			return 19;
			break;
		case 20:
			return 20;
			break;
		case 21:
			return 21;
			break;
		case 22:
			return 22;
			break;
		case 23:
			return 23;
			break;
		case 24:
			return 24;
			break;
		case 25:
			return 25;
			break;
		case 26:
			return 26;
			break;
			
	}
}


int search(int x,int *z,int a)
{
	int i;
	for(i=0;i<=a;i++)
	{
		if (z[i]==x)
		{
			return 1;
	 	}
	}

	return 0;
}
void traverse(int i,int j,int x,int value,int (*y)[256])
{
	if((i+1)>=0&&(j>=0))
		if (x==y[i+1][j])
		{
			y[i+1][j]=value;

			traverse(i+1,j,x,value,y);
		}
	if((i+1)>=0&&(j+1)>=0)
		if (x==y[i+1][j+1])
		{
			y[i+1][j+1]=value;
			traverse(i+1,j+1,x,value,y);
		}
	if((i+1)>=0&&(j-1)>=0)
		if (x==y[i+1][j-1])
		{
			y[i+1][j-1]=value;
			traverse(i+1,j-1,x,value,y);
		}
	if(i>=0&&(j+1)>=0)
		if (x==y[i][j+1])
		{
			y[i][j+1]=value;
			traverse(i,j+1,x,value,y);
		}

}












